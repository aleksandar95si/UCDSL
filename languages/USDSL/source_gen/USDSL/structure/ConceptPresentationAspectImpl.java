package USDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ACSO;
  private ConceptPresentation props_ANSO;
  private ConceptPresentation props_APISO;
  private ConceptPresentation props_AbstractAction;
  private ConceptPresentation props_ActionField;
  private ConceptPresentation props_Actor;
  private ConceptPresentation props_DomainEntity;
  private ConceptPresentation props_DomainModel;
  private ConceptPresentation props_FinalState;
  private ConceptPresentation props_OA;
  private ConceptPresentation props_OutState;
  private ConceptPresentation props_PropertyDefinedByActor;
  private ConceptPresentation props_PropertyDefinedBySystem;
  private ConceptPresentation props_PropertyInAction;
  private ConceptPresentation props_PropertyListMachine;
  private ConceptPresentation props_SO;
  private ConceptPresentation props_StartState;
  private ConceptPresentation props_StateMachine;
  private ConceptPresentation props_StateRef;
  private ConceptPresentation props_SystemModel;
  private ConceptPresentation props_Transition;
  private ConceptPresentation props_TransitionRef;
  private ConceptPresentation props_TransitonState;
  private ConceptPresentation props_UseCase;
  private ConceptPresentation props_UseCaseDefinition;
  private ConceptPresentation props_UseCaseMachine;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ACSO:
        if (props_ACSO == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ACSO");
          props_ACSO = cpb.create();
        }
        return props_ACSO;
      case LanguageConceptSwitch.ANSO:
        if (props_ANSO == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ANSO");
          props_ANSO = cpb.create();
        }
        return props_ANSO;
      case LanguageConceptSwitch.APISO:
        if (props_APISO == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("APISO");
          props_APISO = cpb.create();
        }
        return props_APISO;
      case LanguageConceptSwitch.AbstractAction:
        if (props_AbstractAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractAction = cpb.create();
        }
        return props_AbstractAction;
      case LanguageConceptSwitch.ActionField:
        if (props_ActionField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ActionField");
          props_ActionField = cpb.create();
        }
        return props_ActionField;
      case LanguageConceptSwitch.Actor:
        if (props_Actor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actor = cpb.create();
        }
        return props_Actor;
      case LanguageConceptSwitch.DomainEntity:
        if (props_DomainEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainEntity = cpb.create();
        }
        return props_DomainEntity;
      case LanguageConceptSwitch.DomainModel:
        if (props_DomainModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DomainModel");
          props_DomainModel = cpb.create();
        }
        return props_DomainModel;
      case LanguageConceptSwitch.FinalState:
        if (props_FinalState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinalState = cpb.create();
        }
        return props_FinalState;
      case LanguageConceptSwitch.OA:
        if (props_OA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OA");
          props_OA = cpb.create();
        }
        return props_OA;
      case LanguageConceptSwitch.OutState:
        if (props_OutState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_OutState = cpb.create();
        }
        return props_OutState;
      case LanguageConceptSwitch.PropertyDefinedByActor:
        if (props_PropertyDefinedByActor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PropertyDefinedByActor = cpb.create();
        }
        return props_PropertyDefinedByActor;
      case LanguageConceptSwitch.PropertyDefinedBySystem:
        if (props_PropertyDefinedBySystem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PropertyDefinedBySystem = cpb.create();
        }
        return props_PropertyDefinedBySystem;
      case LanguageConceptSwitch.PropertyInAction:
        if (props_PropertyInAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PropertyInAction = cpb.create();
        }
        return props_PropertyInAction;
      case LanguageConceptSwitch.PropertyListMachine:
        if (props_PropertyListMachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PropertyListMachine");
          props_PropertyListMachine = cpb.create();
        }
        return props_PropertyListMachine;
      case LanguageConceptSwitch.SO:
        if (props_SO == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SO");
          props_SO = cpb.create();
        }
        return props_SO;
      case LanguageConceptSwitch.StartState:
        if (props_StartState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StartState = cpb.create();
        }
        return props_StartState;
      case LanguageConceptSwitch.StateMachine:
        if (props_StateMachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StateMachine");
          props_StateMachine = cpb.create();
        }
        return props_StateMachine;
      case LanguageConceptSwitch.StateRef:
        if (props_StateRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StateRef = cpb.create();
        }
        return props_StateRef;
      case LanguageConceptSwitch.SystemModel:
        if (props_SystemModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SystemModel = cpb.create();
        }
        return props_SystemModel;
      case LanguageConceptSwitch.Transition:
        if (props_Transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Transition = cpb.create();
        }
        return props_Transition;
      case LanguageConceptSwitch.TransitionRef:
        if (props_TransitionRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TransitionRef");
          props_TransitionRef = cpb.create();
        }
        return props_TransitionRef;
      case LanguageConceptSwitch.TransitonState:
        if (props_TransitonState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransitonState = cpb.create();
        }
        return props_TransitonState;
      case LanguageConceptSwitch.UseCase:
        if (props_UseCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d61c1e40L, 0x545fb3f5d61c1e77L, "refDef", "", "");
          props_UseCase = cpb.create();
        }
        return props_UseCase;
      case LanguageConceptSwitch.UseCaseDefinition:
        if (props_UseCaseDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UseCaseDefinition = cpb.create();
        }
        return props_UseCaseDefinition;
      case LanguageConceptSwitch.UseCaseMachine:
        if (props_UseCaseMachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UseCaseMachine");
          props_UseCaseMachine = cpb.create();
        }
        return props_UseCaseMachine;
    }
    return null;
  }
}
