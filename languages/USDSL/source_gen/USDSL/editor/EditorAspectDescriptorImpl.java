package USDSL.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ACSO_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ANSO_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new APISO_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ActionField_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Actor_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DomainEntity_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DomainModel_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new FinalState_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new OA_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new PropertyDefinedByActor_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new PropertyDefinedBySystem_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new PropertyInAction_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new PropertyListMachine_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new SO_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new StartState_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new StateMachine_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new StateRef_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new SystemModel_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Transition_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new TransitionRef_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new TransitonState_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new UseCase_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new UseCaseDefinition_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new UseCaseMachine_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new PropertyDefinedByActor_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new StateRef_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new UseCase_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x6ae5bdeae415fd0dL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x6ae5bdeae420bad3L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x6ae5bdeae420bad4L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x6ae5bdeae41a19c6L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x1d63b1ce58ec0671L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc13c289eL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc13b6a88L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc1403c71L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x6ae5bdeae420bad2L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d622ef75L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x22f9cd4eee9cfaa7L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d623b042L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d62497b2L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x6ae5bdeae415fd0eL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc1407deeL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc13d15dcL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc13fcbacL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc13b6a8bL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc141a838L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x6dbb24f8fbc9ee0eL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc142a9b6L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d61c1e40L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc13d5edeL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d61c1e3dL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d622ef75L), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x4ee0561cc13fcbacL), MetaIdFactory.conceptId(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d61c1e40L)).seal();
}
