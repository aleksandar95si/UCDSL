package USDSL.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import USDSL.behavior.Actor__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class abstractActionFactories {
  public static class NodeFactory_7906954222571877891 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      SNode useCaseNode = (SNode) SNodeOperations.getNodeAncestor(enclosingNode, CONCEPTS.UseCase$$2, false, false);
      SPropertyOperations.assign(newNode, PROPS.actorName$_sHN, Actor__BehaviorDescriptor.getActorName_id6QV9fzVEGOe.invoke(SLinkOperations.getTarget(useCaseNode, LINKS.actor$E7Ky)));
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept UseCase$$2 = MetaAdapterFactory.getConcept(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d61c1e40L, "USDSL.structure.UseCase");
  }

  private static final class PROPS {
    /*package*/ static final SProperty actorName$_sHN = MetaAdapterFactory.getProperty(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d61f5ee2L, 0x6dbb24f8fbb1a5f6L, "actorName");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actor$E7Ky = MetaAdapterFactory.getContainmentLink(0x810c97e7e104dadL, 0x97d97fc9c6808e25L, 0x545fb3f5d61c1e40L, 0x1d63b1ce58ec067cL, "actor");
  }
}
